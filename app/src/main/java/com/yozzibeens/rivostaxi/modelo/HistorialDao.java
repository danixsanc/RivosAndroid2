package com.yozzibeens.rivostaxi.modelo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yozzibeens.rivostaxi.modelo.Historial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HISTORIAL.
*/
public class HistorialDao extends AbstractDao<Historial, Long> {

    public static final String TABLENAME = "HISTORIAL";

    /**
     * Properties of entity Historial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Request_Id = new Property(1, String.class, "Request_Id", false, "REQUEST__ID");
        public final static Property Inicio = new Property(2, String.class, "Inicio", false, "INICIO");
        public final static Property Destino = new Property(3, String.class, "Destino", false, "DESTINO");
        public final static Property Date = new Property(4, String.class, "Date", false, "DATE");
        public final static Property Cabbie = new Property(5, String.class, "Cabbie", false, "CABBIE");
    };


    public HistorialDao(DaoConfig config) {
        super(config);
    }
    
    public HistorialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HISTORIAL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'REQUEST__ID' TEXT," + // 1: Request_Id
                "'INICIO' TEXT," + // 2: Inicio
                "'DESTINO' TEXT," + // 3: Destino
                "'DATE' TEXT," + // 4: Date
                "'CABBIE' TEXT);"); // 5: Cabbie
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HISTORIAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Historial entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Request_Id = entity.getRequest_Id();
        if (Request_Id != null) {
            stmt.bindString(2, Request_Id);
        }
 
        String Inicio = entity.getInicio();
        if (Inicio != null) {
            stmt.bindString(3, Inicio);
        }
 
        String Destino = entity.getDestino();
        if (Destino != null) {
            stmt.bindString(4, Destino);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(5, Date);
        }
 
        String Cabbie = entity.getCabbie();
        if (Cabbie != null) {
            stmt.bindString(6, Cabbie);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Historial readEntity(Cursor cursor, int offset) {
        Historial entity = new Historial( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Request_Id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Inicio
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Destino
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Cabbie
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Historial entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRequest_Id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInicio(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDestino(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCabbie(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Historial entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Historial entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
